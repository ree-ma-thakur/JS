PRACTICE
1. 

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
NEOSOFT
1. Develop a React paginated list view that shows posts fetched from an API or a mock dataset. Implement a pagination system through which users can navigate between pages. Also, display the number of post per page.
API - https://jsonplaceholder.typicode.com/posts
/* Posts List */
import { useEffect } from "react";
import { useState } from "react";

const pageItemsOption = ["5", "10", "20"];

const PostList = () => {
  const [posts, setPosts] = useState([]);
  const [filteredPosts, setFilteredPosts] = useState([]);
  const [postPerPage, setPostPerPage] = useState(pageItemsOption?.[0]);
  const [currentPage, setCurrentPage] = useState(1);

  useEffect(() => {
    fetchPosts();
  }, []);

  useEffect(() => {
    const lastIndex = currentPage * postPerPage;
    const firstIndex = lastIndex - postPerPage;
    setFilteredPosts(posts.slice(firstIndex, lastIndex));
  }, [currentPage, postPerPage, posts]);

  const fetchPosts = async () => {
    const response = await fetch("https://jsonplaceholder.typicode.com/posts");
    const postsData = await response.json();
    setPosts(postsData);
  };

  const handlePostPerPage = (e) => {
    setPostPerPage(e.target.value);
    setCurrentPage(1);
  };

  const handlePagination = (page) => {
    setCurrentPage(page);
  };

  return (
    <div className="container">
      <h2>Posts List</h2>
      <label>Posts per page</label>
      <select value={postPerPage} onChange={handlePostPerPage}>
        {pageItemsOption?.map((item) => (
          <option key={item} value={item}>
            {item}
          </option>
        ))}
      </select>
      <ul className="post-list">
        {filteredPosts?.map((post, index) => (
          <li key={post?.id}>
            <h3>{`${(currentPage - 1) * postPerPage + index + 1} ${
              post?.title
            }`}</h3>
            <span>{post?.body}</span>
          </li>
        ))}
      </ul>
      <div className="pagination">
        {Array.from(
          { length: posts.length / postPerPage },
          (_postPage, index) => (
            <button
              key={index + 1}
              onClick={() => handlePagination(index + 1)}
              className={index + 1 === currentPage ? "active" : ""}
            >
              {index + 1}
            </button>
          )
        )}
      </div>
    </div>
  );
};

export default PostList;

/* Posts CSS */
.container {
  margin: 10px;
}
.post-list {
  list-style: none;
}
.post-list li {
  border: 1px solid rgb(202, 198, 198);
  border-radius: 5px;
  margin: 10px 0;
  padding: 10px;
}
.pagination {
  display: flex;
  justify-content: center;
}
.pagination button {
  margin: 10px;
  padding: 10px 15px;
  border: 1px solid #ccc;
  border-radius: 5px;
  cursor: pointer;
}
.active {
  background-color: #63a5b8;
}

-------------------------------------
2. Progress bar till width of screen with 10x speed per second


--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
TALENTSPRINT
1. Add todo item in the list from input box on click of submit
import { useState } from "react";
import "./styles.css";

export default function App() {
  const [todoItem, setToDoItem] = useState();
  const [toDos, setToDos] = useState([]);

  const handleToDoItem = (e) => {
    setToDoItem(e.target.value);
  };

  const handleToDoAdd = () => {
    const items = [...toDos];
    items.push(todoItem);
    setToDos(items);
    setToDoItem("");
  };

  return (
    <div className="App">
      <input type="text" value={todoItem} onChange={handleToDoItem} />
      <button type="button" onClick={handleToDoAdd}>
        Add
      </button>
      <>
        <h2>To Do Items</h2>
        {toDos?.length > 0 ? (
          <ul>
            {toDos?.map((toDo) => (
              <li key={toDo}>{toDo}</li>
            ))}
          </ul>
        ) : (
          <div>No Item found</div>
        )}
      </>
    </div>
  );
}

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------