DSA basics
- Time Complexity : O(1) [no for loop], O(n) [one for loop at a time], O(n2) [for loop inside a for loop].
- Boolean, number, undefined, null have Constant space complexity: O(1)
- Array. String & Object have dynamic space complexity: O(n)
- Arrays inside array logic have O(n2) space complexity.
- Objects: Insertion, Removal, Access, hasOwnProperty have O(1)
    Searching, Object.keys, Object.values, Object.entries have O(n).
- Array: Search, Shift, Unshift, Concat, Slice, Splice, forEach, map, filter, reduce, reverse, split, join, new Set, flat : O(n)
    Access, Push, Pop have O(1)
    Insertion & removal: depends!; Push, pop are faster than shift & unshift because the whole array places change in shift & unshift
    Sort has O(nlogn)

--------------------------------------------------------------------------------------

1. Palindrome Number
const palindromeNumber = (num) => {
  return num < 0 ? false : num === +num.toString().split("").reverse().join("");
};
console.log(palindromeNumber(0));

--------------------------------------------------------------------------------------
2. Palindrome String
const palindromeString = (str) => {
  const len = str.length;
  for (let i = 0; i < len / 2; i++) {
    if (str[i] !== str[len - 1 - i]) {
      return false;
    }
  }
  return true;
};
console.log(palindromeString("re]per"));

--------------------------------------------------------------------------------------
3. Fibonacci Series
const fibonacci = (num) => {
  if (num < 1) return false;
  const arr = [0, 1];
  for (let i = 2; i <= num; i++) {
    arr.push(arr[i - 1] + arr[i - 2]);
  }
  return arr;
};
console.log(fibonacci(0));

--------------------------------------------------------------------------------------
4. Fibonacci Number
const fibonacci = (num) =>
  num <= 1 ? num : fibonacci(num - 1) + fibonacci(num - 2);
console.log(fibonacci(8));

--------------------------------------------------------------------------------------
5. Anagram
const anagram = (str1, str2) => {
  if (str1.length !== str2.length) return false;
  const obj1 = {},
    obj2 = {};
  for (let i = 0; i < str1.length; i++) {
    obj1[str1[i]] = (obj1[str1[i]] || 0) + 1;
    obj2[str2[i]] = (obj2[str2[i]] || 0) + 1;
  }
  for (key in obj1) {
    if (obj1[key] !== obj2[key]) return false;
  }
  return true;
};
console.log(anagram("temst", "eestt"));

--------------------------------------------------------------------------------------
6. Array of numbers with a specific target
const targetTwoSum = (arr, target) => {
  let obj = {};
  for (let i = 0; i < arr.length; i++) {
    if (obj[target - arr[i]]) {
    return [obj[target - arr[i]], i];
    } else {
      obj[arr[i]] = i;
    }
  }
  return "No result";
};
console.log(targetTwoSum([4, 3, 5, 7, 10], 14));

--------------------------------------------------------------------------------------
7. Maximum profit on days: Best time to buy and sell stocks.
// using greedy algo(We will calculate solution with whatever we have right now)
const maxProfitToBuySellStocks = (prices) => {
  let minStockPrice = prices[0],
    profit = 0;
  for (let i = 1; i < prices.length; i++) {
    if (prices[i] < minStockPrice) minStockPrice = prices[i];
    profit = Math.max(profit, prices[i] - minStockPrice);
  }
  return profit;
};

console.log(maxProfitToBuySellStocks([7, 5, 2, 6, 9])); 

--------------------------------------------------------------------------------------